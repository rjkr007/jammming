{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/SearchResults/SearchResults.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","Track","props","addTrack","bind","removeTrack","this","isRemoval","className","onClick","onAdd","track","onRemove","name","artist","album","renderAction","React","Component","TrackList","tracks","map","id","Playlist","handleNameChange","event","onNameChange","target","value","playlistName","onChange","playlistTracks","onSave","SearchBar","state","term","search","handleTermChange","onSearch","setState","placeholder","SearchResults","searchResults","clientId","process","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46339685.chunk.js","sourcesContent":["let accessToken;\nconst clientId = `${process.env.REACT_APP_SPOTIFY_CLIENT_ID}`;\n// const clientId = process.env.REACT_APP_SPOTIFY_ClientId;\n// const redirectUri = \"https://rjkr007.github.io/jammming/\";\nconst redirectUri = \"http://localhost:3000/\";\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    // check for access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n    //   accessToken = accessToken.replace(\"=\", \"\"); // troubleshoot\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map((track) => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n        }));\n      });\n  },\n\n  savePlayList(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}`};\n    let userId;\n\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers}).then(response => response.json()\n    ).then(jsonResponse => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({ name:name })\n        }).then(response => response.json()\n        ).then(jsonResponse => {\n            const playlistId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n              {\n                headers: headers,\n                method: \"POST\",\n                body: JSON.stringify({ uris: trackUris })\n              }\n            );\n                         \n        })\n    })\n  }\n};\n\nexport default Spotify;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n         constructor(props){\n        super(props);\n\n        this.addTrack = this.addTrack.bind(this);\n         this.removeTrack = this.removeTrack.bind(this);\n      }\n\n      renderAction() {\n        if (this.props.isRemoval) {\n          return (\n            <button className=\"Track-action\" onClick={this.removeTrack}>\n              -\n            </button>\n          );\n           } else {\n            return (\n<button className=\"Track-action\" onClick={this.addTrack}>\n              +\n            </button>\n            );\n          }\n        }\n    \n        addTrack(props) {\n          this.props.onAdd(this.props.track)\n        }\n\n        removeTrack(props) {\n          this.props.onRemove(this.props.track) \n        }\n\n    render() {\n        return (\n<div className=\"Track\">\n  <div className=\"Track-information\">\n    <h3>{this.props.track.name}</h3>\n    <p>{this.props.track.artist} | {this.props.track.album}</p>\n  </div>\n  {this.renderAction()}\n</div>\n        );\n    }\n}\n\nexport default Track;\n","import React from \"react\";\nimport Track from \"../Track/Track\";\nimport \"./TrackList.css\";\n\nexport default class TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks.map((track) => {\n          return (\n            <Track\n              track={track}\n              key={track.id}\n              onAdd={this.props.onAdd}\n              onRemove={this.props.onRemove}\n              isRemoval={this.props.isRemoval}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport TrackList from \"../TrackList/TrackList\";\nimport \"./Playlist.css\";\n\nexport default class Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input value={this.props.playlistName} onChange={this.handleNameChange} />\n        <TrackList\n          tracks={this.props.playlistTracks}\n          onRemove={this.props.onRemove}\n          isRemoval={true}\n        />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>\n          SAVE TO SPOTIFY\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nexport default class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: \"\",\n    };\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input\n          placeholder=\"Enter A Song, Album, or Artist\"\n          onChange={this.handleTermChange}\n        />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./SearchResults.css\";\nimport TrackList from \"../TrackList/TrackList\";\n\nexport default class SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList\n          tracks={this.props.searchResults}\n          onAdd={this.props.onAdd}\n          isRemoval={false}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Playlist from \"../Playlist/Playlist\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"New Playlist\",\n      playlistTracks: [],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((savedTrack) => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks.filter(\n      (currentTrack) => track.id !== currentTrack.id\n    );\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    let trackUris = this.state.playlistTracks.map((track) => track.uri);\n    if (trackUris && trackUris.length) {\n      Spotify.savePlayList(this.state.playlistName, trackUris).then(() => {\n        // this.getUserPlaylists();\n        this.setState({\n          playlistName: \"New Playlist\",\n          playlistTracks: [],\n        });\n      });\n    } else {\n      alert(\"Please add tracks to your Playlist.\");\n    }\n  }\n\n  search(term) {\n    Spotify.search(term).then((searchResults) => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}